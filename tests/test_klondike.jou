import "stdlib/io.jou"

import "./util.jou"
import "../src/card.jou"
import "../src/state.jou"
import "../src/klondike.jou"


def count_cards(first: Card*) -> int:
    n = 0
    for card = first; card != NULL; card = card->next:
        n++
    return n


def count_visible_cards(first: Card*) -> int:
    n = 0
    for card = first; card != NULL; card = card->next:
        if card->visible:
            n++
    return n


def test_deal_cards() -> None:
    klon = Klondike{}
    klon.deal_cards()
    assert klon.num_picked == 0

    assert count_cards(klon.stock) == 13*4 - (1+2+3+4+5+6+7)
    assert count_visible_cards(klon.stock) == 0

    assert count_cards(klon.discard) == 0

    for i = 0; i < 4; i++:
        assert count_cards(klon.foundations[i]) == 0

    for i = 0; i < 7; i++:
        assert count_cards(klon.tableau[i]) == i+1
        assert count_visible_cards(klon.tableau[i]) == 1
        assert cardlist_top(klon.tableau[i])->visible


def test_can_move() -> None:
    klon = Klondike{}
    klon.deal_cards()

    # non-visible cards can never be moved
    assert not klon.tableau[2]->visible
    assert not klon.can_move(klon.tableau[2], &klon.stock)
    assert not klon.can_move(klon.tableau[2], &klon.discard)
    assert not klon.can_move(klon.tableau[2], &klon.foundations[3])
    assert not klon.can_move(klon.tableau[2], &klon.tableau[3])

    # discarding is implemented separately
    assert not klon.can_move(klon.stock, &klon.discard)

    # TODO: test rest of the code? problem is, how do i find e.g. ♠A or ♥Q


# Creates a game where some tableau->tableau move is possible
def init_movable_kln(klon: Klondike*, srctab: int*, dsttab: int*) -> None:
    while True:
        klon->deal_cards()

        for i = 0; i < 7; i++:
            for j = 0; j < 7; j++:
                if i == j:
                    continue
                if klon->can_move(cardlist_top(klon->tableau[i]), &klon->tableau[j]):
                    *srctab = i
                    *dsttab = j
                    return


def test_move() -> None:
    klon: Klondike
    srctab, dsttab: int
    init_movable_kln(&klon, &srctab, &dsttab)

    klon.move(cardlist_top(klon.tableau[srctab]), &klon.tableau[dsttab], False)
    for i = 0; i < 7; i++:
        n = i+1
        if i == srctab:
            n--
        if i == dsttab:
            n++
        assert count_cards(klon.tableau[i]) == n

        if i == dsttab:
            assert count_visible_cards(klon.tableau[i]) == 2
        elif i == 0 and srctab == 0:
            assert count_visible_cards(klon.tableau[i]) == 0
        else:
            assert count_visible_cards(klon.tableau[i]) == 1

        if klon.tableau[i] != NULL:
            assert cardlist_top(klon.tableau[i])->visible


def discard_check(klon: Klondike, ndiscarded: int, ds: int) -> None:
    assert klon.num_picked == ds

    assert count_cards(klon.stock) == 13*4 - (1+2+3+4+5+6+7) - ndiscarded
    assert count_visible_cards(klon.stock) == 0

    assert count_cards(klon.discard) == ndiscarded
    assert count_visible_cards(klon.discard) == ndiscarded


def test_stock_to_discard() -> None:
    klon = Klondike{}
    klon.deal_cards()
    discard_check(klon, 0, 0)

    savestock = klon.stock

    klon.stock_to_discard(Args{pick = 1})
    discard_check(klon, 1, 1)

    klon.stock_to_discard(Args{pick = 2})
    discard_check(klon, 3, 2)

    for n = 4; n <= 13*4 - (1+2+3+4+5+6+7) - 1; n++:
        klon.stock_to_discard(Args{pick = 1})
        discard_check(klon, n, 1)

    klon.stock_to_discard(Args{pick = 1})
    discard_check(klon, 13*4 - (1+2+3+4+5+6+7), 1)

    klon.discard_to_stock()
    discard_check(klon, 0, 0)

    # make sure that the order of the cards doesn't reverse
    assert klon.stock == savestock

    # TODO: test with less than 13*4 - (1+2+3+4+5+6+7) stock cards? e.g. 0 stock cards


def test_stock_to_discard_visibility_with_discard_hide() -> None:
    klon = Klondike{}
    klon.deal_cards()

    klon.stock_to_discard(Args{pick = 3, discardhide = True})
    klon.stock_to_discard(Args{pick = 3, discardhide = True})

    # Only the topmost card should be visible
    assert cardlist_top(klon.discard)->visible
    n = 0
    for c = klon.discard; c != NULL; c = c->next:
        if c->visible:
            n++
    assert n == 1


def test_stock_to_discard_visibility_without_discard_hide() -> None:
    klon = Klondike{}
    klon.deal_cards()

    klon.stock_to_discard(Args{pick = 3, discardhide = False})
    klon.stock_to_discard(Args{pick = 3, discardhide = False})

    # All cards should be visible
    for c = klon.discard; c != NULL; c = c->next:
        assert c->visible


def main() -> int:
    test_deal_cards()
    dot()
    test_can_move()
    dot()
    test_move()
    dot()
    test_stock_to_discard()
    dot()
    test_stock_to_discard_visibility_with_discard_hide()
    dot()
    test_stock_to_discard_visibility_without_discard_hide()
    dot()

    printf(" ok\n")
    return 0
