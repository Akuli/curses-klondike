import "stdlib/str.jou"

import "./state.jou"
import "./klondike.jou"
import "./curses.jou"
import "./card.jou"


const CARD_WIDTH: int = 7
const CARD_HEIGHT: int = 5

# offsets for laying out cards so that they overlap
const X_OFFSET: int = 3
const Y_OFFSET_SMALL: int = 1
const Y_OFFSET_BIG: int = 2


def draw_card_border(left: int, top: int, thick: bool, fill: byte*) -> None:
    right = left + CARD_WIDTH
    bottom = top + CARD_HEIGHT

    # https://en.wikipedia.org/wiki/Box-drawing_character#Unicode
    if thick:
        horizontal = "═"
        vertical = "║"
        upper_left = "╔"
        upper_right = "╗"
        lower_left = "╚"
        lower_right = "╝"
    else:
        horizontal = "─"
        vertical = "│"
        upper_left = "╭"
        upper_right = "╮"
        lower_left = "╰"
        lower_right = "╯"

    mvaddstr(top, left, upper_left)
    for x = left + 1; x < right - 1; x++:
        mvaddstr(top, x, horizontal)
    mvaddstr(top, right - 1, upper_right)

    for y = top + 1; y < bottom - 1; y++:
        mvaddstr(y, left, vertical)
        if fill != NULL:
            for x = left + 1; x < right - 1; x++:
                mvaddstr(y, x, fill)
        mvaddstr(y, right - 1, vertical)

    mvaddstr(bottom - 1, left, lower_left)
    for x = left + 1; x < right - 1; x++:
        mvaddstr(bottom - 1, x, horizontal)
    mvaddstr(bottom - 1, right - 1, lower_right)


# ui_x() and ui_y() convert coordinates from card counts to curses coordinates
def ui_x(x_count: int) -> int:
    # Evenly spaced 7 columns, each column's width is CARD_WIDTH/2
    #
    # space per column = terminal_width/7
    # center of column = space per column * (x_count + 1/2)
    # result = center of column - CARD_WIDTH/2
    #
    # Simplifying it gives this.
    return ((2*x_count + 1)*getmaxx(stdscr) - 7*CARD_WIDTH) / (2*7)

def ui_y(y_count: int) -> int:
    return y_count * CARD_HEIGHT


# Determines what card is selected, if any.
#
# When moving a pile of cards at once, the first (bottom) card in the pile
# is returned.
def get_selected_card(app_state: AppState*) -> Card*:
    if app_state->selmv.is_move:
        return app_state->selmv.move.card
    else:
        return app_state->selmv.selection.card


def get_selected_place(app_state: AppState*) -> CardPlace:
    if app_state->selmv.is_move:
        return app_state->selmv.move.dest
    else:
        return app_state->selmv.selection.place


def draw_card(app_state: AppState*, card: Card*, left: int, top: int) -> None:
    assert card != NULL

    selected = False
    for c = get_selected_card(app_state); c != NULL; c = c->next:
        if c == card:
            selected = True
            break

    if card->visible:
        draw_card_border(left, top, selected, " ")
    else:
        draw_card_border(left, top, selected, "?")

    if card->visible:
        attributes = COLOR_PAIR(color_pair_number(suit_to_color(card->suit)))
        if app_state->args.color:
            wattron(stdscr, attributes)

        number_string = card_number_to_string(card->number)
        suit_string = suit_to_string(card->suit)
        mvaddstr(top + 1, left + 1, number_string)
        mvaddstr(top + CARD_HEIGHT - 2, left + CARD_WIDTH - 1 - (strlen(number_string) as int), number_string)
        mvaddstr(top + 1, left + CARD_WIDTH - 2, suit_string)
        mvaddstr(top + CARD_HEIGHT - 2, left + 1, suit_string)

        if app_state->args.color:
            wattroff(stdscr, attributes)


# For drawing cards at a certain place.
#
# Places results to the result array. Returns number of cards in it.
def get_cards_after_moves(app_state: AppState*, place: CardPlace, result: Card*[52]*) -> int:
    match place.kind:
        case CardPlaceKind.Stock:
            first_card_at_place = app_state->klon.stock
        case CardPlaceKind.Discard:
            first_card_at_place = app_state->klon.discard
        case CardPlaceKind.Foundation:
            first_card_at_place = app_state->klon.foundations[place.number]
        case CardPlaceKind.Tableau:
            first_card_at_place = app_state->klon.tableau[place.number]

    i = 0

    if (
        app_state->selmv.is_move
        and not app_state->selmv.move.src.equals(app_state->selmv.move.dest)
        and place.equals(app_state->selmv.move.src)
    ):
        # Cards are being moved away from here. Stop at the moving card.
        for c = first_card_at_place; c != NULL; c = c->next:
            if c == app_state->selmv.move.card:
                break
            (*result)[i++] = c
    elif (
        app_state->selmv.is_move
        and not app_state->selmv.move.src.equals(app_state->selmv.move.dest)
        and place.equals(app_state->selmv.move.dest)
    ):
        # Cards are being moved here. Add moved cards to end of result.
        for c = first_card_at_place; c != NULL; c = c->next:
            (*result)[i++] = c
        for c = app_state->selmv.move.card; c != NULL; c = c->next:
            (*result)[i++] = c
    else:
        # Moves are irrelevant
        for c = first_card_at_place; c != NULL; c = c->next:
            (*result)[i++] = c

    assert i < sizeof(*result) / sizeof((*result)[0])
    return i


# Draws cards below each other.
#
# If there is enough room for all the cards, we draw the cards so that the user
# can see what the cards are.
#
# If there is not enough room for all the cards, we draw them closer to each
# other. I call this compressing or overflow handling.
def draw_cards_with_compression(app_state: AppState*, cards: Card**, ncards: int, left: int, top: int) -> None:
    if ncards == 0:
        return

    # Cards are alloed to go slightly beyond the bottom of screen.
    # To implement that, let's pretend the bottom of screen is lower than it really is.
    pretend_screen_height = getmaxy(stdscr) + CARD_HEIGHT/2

    bottom_with_no_compression = top + (ncards - 1)*Y_OFFSET_BIG + CARD_HEIGHT
    overflow = bottom_with_no_compression - pretend_screen_height

    # How many gaps between cards to compress? Zero or negative means compression is not needed.
    space_saved_by_one_comp = Y_OFFSET_BIG - Y_OFFSET_SMALL
    assert space_saved_by_one_comp == 1
    num_comps = overflow

    for i = 0; i < ncards; i++:
        draw_card(app_state, cards[i], left, top)
        if i >= ncards - num_comps - 1:
            top += Y_OFFSET_SMALL
        else:
            top += Y_OFFSET_BIG


def draw_stock(app_state: AppState*) -> None:
    if app_state->klon.stock != NULL:
        draw_card(app_state, app_state->klon.stock, ui_x(0), ui_y(0))


def draw_discard(app_state: AppState*) -> None:
    place = CardPlace{kind = CardPlaceKind.Discard}
    cards: Card*[52]
    ncards = get_cards_after_moves(app_state, place, &cards)

    num_picked = app_state->klon.num_picked
    if (
        app_state->selmv.is_move
        and app_state->selmv.move.src.equals(place)
        and not app_state->selmv.move.dest.equals(place)
    ):
        # A card is being moved away from discard.
        num_picked--

    x = ui_x(1)
    y = ui_y(0)

    for i = 0; i < ncards; i++:
        draw_card(app_state, cards[i], x, y)
        if i >= ncards - num_picked:
            # Do not cover this with other cards
            if app_state->args.discardhide:
                x++
            else:
                x += X_OFFSET


def draw_foundation(app_state: AppState*, number: int) -> None:
    assert 0 <= number and number < 4

    place = CardPlace{kind = CardPlaceKind.Foundation, number = number}
    cards: Card*[52]
    ncards = get_cards_after_moves(app_state, place, &cards)

    if ncards != 0:
        # Draw only the last card
        draw_card(app_state, cards[ncards - 1], ui_x(3 + number), ui_y(0))


def draw_tableau(app_state: AppState*, number: int) -> None:
    place = CardPlace{kind = CardPlaceKind.Tableau, number = number}
    cards: Card*[52]
    ncards = get_cards_after_moves(app_state, place, &cards)

    x = ui_x(number)
    y = ui_y(1)

    for i = 0; i < ncards; i++:
        if cards[i]->visible:
            draw_cards_with_compression(app_state, &cards[i], ncards - i, x, y)
            break

        draw_card(app_state, cards[i], x, y)
        y += Y_OFFSET_SMALL


def place_to_xy(place: CardPlace) -> int[2]:
    match place.kind:
        case CardPlaceKind.Stock:
            return [ui_x(0), ui_y(0)]
        case CardPlaceKind.Discard:
            return [ui_x(1), ui_y(0)]
        case CardPlaceKind.Foundation:
            return [ui_x(3 + place.number), ui_y(0)]
        case CardPlaceKind.Tableau:
            return [ui_x(place.number), ui_y(1)]


@public
def draw_klondike(app_state: AppState*) -> None:
    werase(stdscr)

    draw_stock(app_state)
    draw_discard(app_state)
    for i = 0; i < 4; i++:
        draw_foundation(app_state, i)
    for i = 0; i < 7; i++:
        draw_tableau(app_state, i)

    # If there are no cards wherever the selection is, draw the selection there
    if get_selected_card(app_state) == NULL:
        xy = place_to_xy(get_selected_place(app_state))
        draw_card_border(xy[0], xy[1], True, NULL)

    if app_state->klon.win():
        msg = "you win :)"
        msg_width = strlen(msg) as int
        mvwaddstr(stdscr, getmaxy(stdscr)/2, (getmaxx(stdscr) - msg_width)/2, msg)
