import "stdlib/ascii.jou"
import "stdlib/math.jou"
import "stdlib/str.jou"

import "./card.jou"
import "./curses.jou"
import "./scroll.jou"


@public
class HelpItem:
    key: byte*
    desc: byte*


# TODO: use a `const` when that becomes possible
def get_help_items() -> HelpItem[14]:
    return [
        HelpItem{key="h", desc="show this help"},
        HelpItem{key="q", desc="quit"},
        HelpItem{key="n", desc="new game"},
        HelpItem{key="s", desc="move card(s) from stock to discard and select discard"},
        HelpItem{key="d", desc="select discard"},
        HelpItem{key="f", desc="move selected card to any foundation, if possible"},
        HelpItem{key="g", desc="move any card to any foundation, if possible"},
        HelpItem{key="Enter", desc="start moving the selected card(s), or complete the move if currently moving"},
        HelpItem{key="Esc", desc="if currently moving card(s), stop that"},
        HelpItem{key="←,→", desc="move selection left/right"},
        HelpItem{key="↑,↓", desc="move selection up/down or select more/less tableau cards"},
        HelpItem{key="PageUp", desc="select all tableau cards"},
        HelpItem{key="PageDown", desc="select only 1 tableau card"},
        HelpItem{key="1,2,…,7", desc="select tableau by number"},
    ]


# TODO: move to stdlib?
def utf8_continuation(b: byte) -> bool:
    return b & 0b1100_0000 == 0b1000_0000


# TODO: move to stdlib?
def utf8_char_count(s: byte*) -> int:
    n = 0
    for p = s; *p != '\0'; p++:
        if not utf8_continuation(*p):
            n++
    return n


# TODO: use a `const` when that becomes possible
def get_picture_lines() -> byte*[8]:
    return [
        "╭──╮╭──╮    ╭──╮╭──╮╭──╮╭──╮",
        "│  ││  │    │ foundations  │",
        "╰──╯╰──╯    ╰──╯╰──╯╰──╯╰──╯",
        "  │   ╰─── discard          ",
        "  ╰─── stock                ",
        "╭──╮╭──╮╭──╮╭──╮╭──╮╭──╮╭──╮",
        "│         tableau          │",
        "╰──╯╰──╯╰──╯╰──╯╰──╯╰──╯╰──╯",
    ]

const PICTURE_WIDTH: int = 28
const PICTURE_HEIGHT: int = 8


# Return value must be free()d.
def get_rules(argv0: byte*) -> byte*:
    format = "\
Here the “suit” of a card means ♥, ♦, ♠ or ♣. \
The “number” of a card means one of A,2,3,4,…,9,10,J,Q,K. \
“Visible” cards are cards whose suit and number are visible to you, aka “face-up” cards.\n\n\
The goal is to move all cards to foundations. \
Each foundation can contain cards of the same suit in increasing order, starting at A. \
For example, if you see ♥A in tableau or discard, you can move it to an empty foundation, and when you see ♥2, you can move it on top of the ♥A and so on.\n\n\
Visible cards on tableau must be in decreasing order with altering colors. \
For example, ♥J ♣10 ♦9 is valid, because the colors are red-black-red and the numbers are 11-10-9.\n\n\
If all visible cards are moved away from a tableau place, the topmost non-visible card is flipped, so that it becomes visible. \
Usually getting all those cards to flip is the most challenging thing in a klondike game. \
If there are no non-visible cards left, the place becomes empty, and a K card can be moved to it.\n\n\
Moving one or more cards from one tableau place to another is allowed. \
Tableau cards can also be moved to foundations, but only one at a time.\n\n\
You can use stock and discard at any time to get more possible moves. \
Cards can be moved from stock to discard, and the topmost card in discard can be moved to tableau or to a foundation. \
By default, 3 cards are moved from stock to discard if the stock contains 3 or more cards; otherwise, all stock cards are moved to discard. \
This can be customized with the --pick option; for example, --pick=1 moves 3 cards instead of 1, which makes the game a lot easier.\n\n\
Moving the topmost card of a foundation to tableau is also allowed. \
This can be useful in some cases.\n\n\
If the game is too hard or too easy, you can customize it with command-line options. \
Quit this help and then the game by pressing q twice, and run “%s\xC2\xA0--help” to get a list of all supported options."
    #                           this is a non-breaking space ----^^^^^^^^

    result: byte* = NULL
    asprintf(&result, format, argv0)
    assert result != NULL
    return result


class Printer:
    terminal_width: int
    y: int
    color: bool
    window: WINDOW*

    # Display a colored suit, e.g. red ♥
    def print_suit_string(self, x: int, suit: Suit) -> None:
        attr = COLOR_PAIR(color_pair_number(suit_to_color(suit)))
        wattron(self->window, attr)
        mvwaddstr(self->window, self->y, x, suit_to_string(suit))
        wattroff(self->window, attr)

    def print_colored(self, x: int, string: byte*, string_len: int) -> None:
        if self->window == NULL:
            return

        if not self->color:
            mvwaddnstr(self->window, self->y, x, string, string_len)
            return

        while string_len > 0:
            bytes_printed = 0

            for s = 0; s < 4; s++:
                suit_str = suit_to_string(s as Suit)
                if string_len >= strlen(suit_str) and starts_with(string, suit_str):
                    self->print_suit_string(x, s as Suit)
                    bytes_printed = strlen(suit_str) as int
                    break

            if bytes_printed == 0:
                # Show as much as we can until we run into end of string or a suit.
                while bytes_printed < string_len and not (
                    starts_with(&string[bytes_printed], suit_to_string(Suit.Heart))
                    or starts_with(&string[bytes_printed], suit_to_string(Suit.Diamond))
                    or starts_with(&string[bytes_printed], suit_to_string(Suit.Spade))
                    or starts_with(&string[bytes_printed], suit_to_string(Suit.Club))
                ):
                    bytes_printed++
                mvwaddnstr(self->window, self->y, x, string, bytes_printed)

            for i = 0; i < bytes_printed; i++:
                if not utf8_continuation(string[i]):
                    x++

            string = &string[bytes_printed]
            string_len -= bytes_printed

    def print_wrapped_colored(self, string: byte*, x_offset: int) -> None:
        picture_lines = get_picture_lines()

        while *string != '\0':
            remaining_width = self->terminal_width - x_offset
            if self->y <= PICTURE_HEIGHT:
                remaining_width -= PICTURE_WIDTH
                remaining_width -= 3  # more space between picture_lines and helps

            # Don't get stuck if terminal is very narrow. Won't look good anyway.
            remaining_width = max(5, remaining_width)

            # Grab as much text as we can fit into the space.
            # Stop after a newline character, so we take "foo\n" from "foo\nbar\n".
            end = string
            while remaining_width > 0 and *end != '\0' and (end == string or end[-1] != '\n'):
                end++
                while utf8_continuation(*end):
                    end++
                remaining_width--

            assert end > string

            if *end != '\0':
                # Not everything fits.
                # If splitting in the middle of a word, let's not do that.
                # Instead, take everything including the space.
                end2 = end
                while end2 > string and not is_ascii_whitespace(end2[-1]):
                    end2--
                if end2 > string:
                    end = end2

            assert end > string

            self->print_colored(x_offset, string, ((end as int64) - (string as int64)) as int)
            self->y++
            string = end

    def print_help_item(self, key_column_width: int, item: HelpItem) -> None:
        if self->window != NULL:
            x = key_column_width - utf8_char_count(item.key)
            mvwprintw(self->window, self->y, x, "%s:", item.key)
        self->print_wrapped_colored(item.desc, key_column_width + 2)

    # Returns number of lines printed
    def print_all_help(self, argv0: byte*) -> int:
        help_items = get_help_items()
        picture_lines = get_picture_lines()

        if self->window != NULL:
            for y = 0; y < sizeof(picture_lines) / sizeof(picture_lines[0]); y++:
                line = picture_lines[y]
                mvwaddstr(self->window, y, self->terminal_width - PICTURE_WIDTH, line)

        max_key_width = 0
        for i = 0; i < sizeof(help_items)/sizeof(help_items[0]); i++:
            max_key_width = max(max_key_width, utf8_char_count(help_items[i].key))

        for i = 0; i < sizeof(help_items)/sizeof(help_items[0]); i++:
            self->print_help_item(max_key_width, help_items[i])

        self->print_title("Rules")
        self->print_wrapped_colored(get_rules(argv0), 0)

        return max(self->y, (sizeof(picture_lines) / sizeof(picture_lines[0])) as int)

    def print_title(self, title: byte*) -> None:
        self->y += 2

        text_width = 0
        for i = 0; title[i] != '\0'; i++:
            if not utf8_continuation(title[i]):
                text_width++

        x = (self->terminal_width - text_width)/2
        left = x - 1
        right = x + text_width + 1

        if self->window != NULL:
            mvwhline(self->window, self->y, 0, 0, self->terminal_width)
            mvwprintw(self->window, self->y, x-1, " %s ", title)

        self->y += 2


@public
def show_help(window: WINDOW*, argv0: byte*, color: bool) -> None:
    printer = Printer{terminal_width = getmaxx(window), color = color}
    printer.print_all_help(argv0)  # calculate height

    pad = newpad(printer.y, getmaxx(window))
    assert pad != NULL

    printer.y = 0
    printer.window = pad

    printer.print_all_help(argv0)

    show_pad_with_scrolling(window, pad)
    delwin(pad)
