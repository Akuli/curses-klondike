# This file parses command-line arguments.

import "stdlib/ascii.jou"
import "stdlib/io.jou"
import "stdlib/str.jou"

import "./state.jou"


enum OptionType:
    YesNo
    Int

class OptionSpec:
    name: byte[100]
    metavar: byte*  # For example the "n" of "--pick n". Only for help messages. May be NULL.
    type: OptionType
    min: int
    max: int
    desc: byte*

    # Returns e.g. "--pick 1" or "--pick=1"
    def name_with_metavar(self, sep: byte) -> byte[100]:
        assert sep == ' ' or sep == '='

        if self.metavar == NULL:
            return self.name

        result: byte[100]
        snprintf(result, sizeof(result), "%s%c%s", self.name, sep, self.metavar)
        return result


# TODO: use a compile-time constant when that is supported
global option_specs: OptionSpec[4]

def init_option_specs() -> None:
    option_specs = [
        OptionSpec{name="--help", type=OptionType.YesNo, desc="show this help message and exit"},
        OptionSpec{name="--no-colors", type=OptionType.YesNo, desc="don't use colors, even if the terminal supports colors"},
        OptionSpec{name="--pick", metavar="n", type=OptionType.Int, min=1, max=(13*4 - (1+2+3+4+5+6+7)), desc="pick n cards from stock at a time, default is 3"},
        OptionSpec{name="--discard-hide", type=OptionType.YesNo, desc="only show topmost discarded card (not useful with --pick=1)"},
    ]


class ParseState:
    out: FILE*  # typically stdout, can also be a temporary file during tests
    err: FILE*  # typically stderr, can also be a temporary file during tests
    program_name: byte*
    remaining_args: byte**  # never includes program name


def print_help(state: ParseState*) -> None:
    nspecs = sizeof(option_specs) / sizeof(option_specs[0])

    fprintf(state.out, "Usage: %s", state.program_name)
    for s = &option_specs[0]; s < &option_specs[nspecs]; s++:
        name_with_metavar = s.name_with_metavar(' ')
        fprintf(state.out, " [%s]", name_with_metavar)

    fprintf(state.out, "\n\nOptions:\n")
    for s = &option_specs[0]; s < &option_specs[nspecs]; s++:
        name_with_metavar = s.name_with_metavar(' ')
        fprintf(state.out, "  %-14s  %s\n", name_with_metavar, s.desc)


# Finds an option by name
#
# Prints error message and returns NULL if not found.
# Supports abbreviations when not ambiguous, e.g. "--discard-h" for "--discard-hide".
def find_option_spec(state: ParseState*, name: byte*) -> OptionSpec*:
    nspecs = sizeof(option_specs) / sizeof(option_specs[0])

    result: OptionSpec* = NULL
    for s = &option_specs[0]; s < &option_specs[nspecs]; s++:
        if starts_with(s.name, name):
            if result == NULL:
                result = s
            else:
                fprintf(
                    state.err, "%s: ambiguous option '%s': could be '%s' or '%s'\n",
                    state.program_name, name, result.name, s.name
                )
                return NULL

    if result == NULL:
        fprintf(state.err, "%s: unknown option '%s'\n", state.program_name, name)
        return NULL

    return result


def is_valid_integer(s: byte*, min: int, max: int) -> bool:
    if *s == '\0':
        return False

    for p = s; *p != '\0'; p++:
        if not is_ascii_digit(*p):
            return False

    # This won't work for very large values, but it doesn't really matter :)
    n = atoi(s)
    return min <= n and n <= max


# Check whether a value (or the lack of value) passed to an option is valid.
#
# Return values:
#   True    ok
#   False   error message printed
def validate_value(state: ParseState*, spec: OptionSpec*, value: byte*) -> bool:
    match spec.type:
        case OptionType.YesNo:
            if value != NULL:
                fprintf(
                    state.err, "%s: use just '%s', not '%s something' or '%s=something'\n",
                    state.program_name, spec.name, spec.name, spec.name,
                )
                return False

            return True

        case OptionType.Int:
            if value == NULL:
                with_space = spec.name_with_metavar(' ')
                with_equal = spec.name_with_metavar('=')
                fprintf(
                    state.err, "%s: use '%s' or '%s', not just '%s'\n",
                    state.program_name, with_space, with_equal, spec.name,
                )
                return False

            if not is_valid_integer(value, spec.min, spec.max):
                fprintf(
                    state.err, "%s: '%s' wants an integer between %d and %d, not '%s'\n",
                    state.program_name, spec.name, spec.min, spec.max, value,
                )
                return False

            return True


# Parse one option and its value, if any.
# One option can come from 2 argv items (--pick 3) or just one (--pick=3, --no-colors).
#
# Return values:
#   True:   Success
#   False:  Error message was printed
def parse_option_and_value(state: ParseState*, value: byte**) -> OptionSpec*:
    arg = *state.remaining_args++
    assert arg != NULL

    if strlen(arg) < 3 or not starts_with(arg, "--"):
        fprintf(state.err, "%s: unexpected argument: '%s'\n", state.program_name, arg)
        return NULL

    eq = strstr(arg, "=")
    if eq != NULL:
        *value = &eq[1]
    elif *state.remaining_args == NULL or starts_with(*state.remaining_args, "-"):
        *value = NULL
    else:
        *value = *state.remaining_args++

    # Get rid of value if any, e.g. "--pick=1" --> "--pick"
    name: byte[100]
    snprintf(name, sizeof(name), "%.*s", strcspn(arg, "=") as int, arg)
    return find_option_spec(state, name)


@public
const CONTINUE_TO_PROGRAM: int = -1


# Return value: CONTINUE_TO_PROGRAM or a number to be passed to exit()
def option_to_args(state: ParseState*, spec: OptionSpec*, value: byte*, args: Args*) -> int:
    match spec.name with strcmp:
        case "--help":
            print_help(state)
            return 0
        case "--no-colors":
            args.color = False
        case "--pick":
            assert value != NULL
            args.pick = atoi(value)
        case "--discard-hide":
            args.discardhide = True
        case _:
            assert False  # should never happen

    return CONTINUE_TO_PROGRAM


# Return value: CONTINUE_TO_PROGRAM or a number to be passed to exit()
def parse_arg(state: ParseState*, seen: OptionSpec**, nseen: int*, args: Args*) -> int:
    value: byte*
    spec = parse_option_and_value(state, &value)
    if spec == NULL or not validate_value(state, spec, value):
        fprintf(state.err, "Run '%s --help' for help.\n", state.program_name)
        return 2

    for i = 0; i < *nseen; i++:
        if seen[i] == spec:
            fprintf(state.err, "%s: repeated option '%s'\n", state.program_name, spec.name)
            fprintf(state.err, "Run '%s --help' for help.\n", state.program_name)
            return 2
    seen[(*nseen)++] = spec

    return option_to_args(state, spec, value, args)


# Return value: CONTINUE_TO_PROGRAM or a number to be passed to exit()
@public
def parse_args(argv: byte**, args: Args*, out: FILE*, err: FILE*) -> int:
    init_option_specs()
    *args = Args{color=True, pick=3, discardhide=False}

    state = ParseState{out=out, err=err, program_name=argv[0], remaining_args=&argv[1]}

    assert sizeof(option_specs) / sizeof(option_specs[0]) == 4
    seen: OptionSpec*[5]
    nseen = 0

    while *state.remaining_args != NULL:
        ret = parse_arg(&state, seen, &nseen, args)
        if ret != CONTINUE_TO_PROGRAM:
            return ret

    return CONTINUE_TO_PROGRAM


# Main function for tests: `jou -o foo src/args.jou` compiles an executable that runs this.
def main(argc: int, argv: byte**) -> int:
    args: Args
    ret = parse_args(argv, &args, stdout, stderr)
    if ret != CONTINUE_TO_PROGRAM:
        return ret

    args.print()
    return 0
