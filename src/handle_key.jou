# This file defines what happens when keys are pressed in game.
#
# Key presses in the help view (press h) and some other things have nothing to
# do with this file.

import "./curses.jou"

import "./state.jou"
import "./card.jou"
import "./klondike.jou"
import "./selectmove.jou"
import "./help.jou"


# Takes cards stock --> discard, or if stock is empty, puts all discardeds to stock.
def stock_to_discard(app_state: AppState*) -> None:
    if app_state->selmv.is_move:
        return

    if app_state->klon.stock == NULL:
        # No cards in stock
        app_state->klon.discard_to_stock()
    else:
        app_state->klon.stock_to_discard(app_state->args.pick)

    # Make sure that whatever ends up in discard place is selected
    app_state->selmv.select_top_card_or_move_to(&app_state->klon, CardPlace{kind = CardPlaceKind.Discard})


def curses_key_to_seldirection(key: int) -> SelDirection:
    match key:
        case KEY_LEFT:
            return SelDirection.Left
        case KEY_RIGHT:
            return SelDirection.Right
        case KEY_UP:
            return SelDirection.Up
        case KEY_DOWN:
            return SelDirection.Down
        case _:
            assert False


@public
def handle_key(app_state: AppState*, key: int) -> None:
    match key:
        ##########################################################################
        ### If you change these, please update the key bindings shown in help! ###
        ##########################################################################
        case 'h':
            show_help(stdscr, app_state->program_name, app_state->args.color)
        case 's':
            stock_to_discard(app_state)
        case 'd':
            if not app_state->selmv.is_move:
                app_state->selmv.select_top_card_or_move_to(&app_state->klon, CardPlace{kind = CardPlaceKind.Discard})
        case 'f':
            if (
                (not app_state->selmv.is_move)
                and app_state->selmv.selection.card != NULL
                and app_state->klon.move2foundation(app_state->selmv.selection.card)
            ):
                app_state->selmv.select_top_card_or_move_to(&app_state->klon, app_state->selmv.selection.place)
        case 'g':
            if not app_state->selmv.is_move:
                # Try discard -> foundation
                moved = app_state->klon.move2foundation(cardlist_top(app_state->klon.discard))
                if not moved:
                    # Try tableau -> foundation
                    for i = 0; i < 7 and not moved; i++:
                        if app_state->klon.move2foundation(cardlist_top(app_state->klon.tableau[i])):
                            moved = True
                            break

                if moved:
                    # update sel.card if needed
                    app_state->selmv.select_top_card_or_move_to(&app_state->klon, app_state->selmv.selection.place)

        case 27:  # esc key, didn't find a KEY_foo constant for this in curses headers
            app_state->selmv.is_move = False
        case KEY_UP | KEY_DOWN:
            if (not app_state->selmv.is_move) and key == KEY_UP and app_state->selmv.selection.select_more(&app_state->klon):
                pass  # Successfully selected more
            elif (not app_state->selmv.is_move) and key == KEY_DOWN and app_state->selmv.selection.select_less(&app_state->klon):
                pass  # Successfully selected less
            else:
                app_state->selmv.select_another_card(&app_state->klon, curses_key_to_seldirection(key))
        case KEY_LEFT | KEY_RIGHT:
            app_state->selmv.select_another_card(&app_state->klon, curses_key_to_seldirection(key))
        case KEY_PPAGE:
            if not app_state->selmv.is_move:
                while app_state->selmv.selection.select_more(&app_state->klon):
                    pass
        case KEY_NPAGE:
            if not app_state->selmv.is_move:
                while app_state->selmv.selection.select_less(&app_state->klon):
                    pass
        case '\n':
            if app_state->selmv.is_move:
                app_state->selmv.end_move(&app_state->klon)
            elif app_state->selmv.selection.place.is_stock():
                stock_to_discard(app_state)
            elif app_state->selmv.selection.card != NULL and app_state->selmv.selection.card->visible:
                app_state->selmv.begin_move()
        case '1' | '2' | '3' | '4' | '5' | '6' | '7':
            app_state->selmv.select_top_card_or_move_to(&app_state->klon, CardPlace{kind = CardPlaceKind.Tableau, number = key - '1'})

